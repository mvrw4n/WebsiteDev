# Generated by Django 5.1.7 on 2025-04-04 14:43

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScrapingResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lead_data', models.JSONField()),
                ('source_url', models.URLField(blank=True, max_length=500, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('is_duplicate', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadEnrichment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interests', models.CharField(blank=True, help_text="Centres d'intérêt du lead", max_length=255, null=True)),
                ('budget', models.CharField(blank=True, help_text='Budget approximatif du lead', max_length=100, null=True)),
                ('preferences', models.CharField(blank=True, help_text='Préférences de contact ou de produit', max_length=255, null=True)),
                ('purchase_history', models.CharField(blank=True, help_text="Historique d'achat ou d'interaction", max_length=255, null=True)),
                ('additional_info', models.TextField(blank=True, help_text="Informations supplémentaires pour personnaliser l'approche", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lead', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='enrichment', to='scraping.scrapingresult')),
            ],
        ),
        migrations.CreateModel(
            name='ScrapingTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('initializing', 'Initialisation'), ('crawling', 'Exploration'), ('extracting', 'Extraction de données'), ('processing', 'Traitement'), ('paused', 'En pause'), ('completed', 'Terminé'), ('failed', 'Échoué')], default='initializing', max_length=20)),
                ('current_step', models.CharField(blank=True, max_length=255, null=True)),
                ('pages_explored', models.IntegerField(default=0)),
                ('leads_found', models.IntegerField(default=0)),
                ('unique_leads', models.IntegerField(default=0)),
                ('duplicate_leads', models.IntegerField(default=0)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('completion_time', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('task_data', models.JSONField(blank=True, default=dict, null=True)),
                ('celery_task_id', models.CharField(blank=True, max_length=255, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraping_tasks', to='core.scrapingjob')),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.AddField(
            model_name='scrapingresult',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='scraping.scrapingtask'),
        ),
        migrations.CreateModel(
            name='ScrapingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('log_type', models.CharField(choices=[('info', 'Information'), ('warning', 'Avertissement'), ('error', 'Erreur'), ('success', 'Succès'), ('action', 'Action')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, null=True)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='scraping.scrapingtask')),
            ],
            options={
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='CeleryWorkerActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('worker_name', models.CharField(max_length=255)),
                ('hostname', models.CharField(max_length=255)),
                ('activity_type', models.CharField(choices=[('scraping', 'Scraping Web Pages'), ('serp_search', 'Performing SERP Search'), ('extracting', 'Extracting Data'), ('processing', 'Processing Results'), ('analyzing', 'Analyzing Content'), ('waiting', 'Waiting for Next Task'), ('idle', 'Idle')], default='idle', max_length=50)),
                ('status', models.CharField(choices=[('running', 'Running'), ('idle', 'Idle'), ('error', 'Error')], default='idle', max_length=20)),
                ('current_url', models.URLField(blank=True, max_length=500, null=True)),
                ('details', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('task', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='worker_activities', to='scraping.scrapingtask')),
            ],
            options={
                'verbose_name_plural': 'Celery worker activities',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TaskQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(choices=[(1, 'Haute'), (2, 'Normale'), (3, 'Basse')], default=2)),
                ('scheduled_time', models.DateTimeField(blank=True, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queue_entries', to='core.scrapingjob')),
            ],
            options={
                'ordering': ['priority', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='ScrapedSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('domain', models.CharField(max_length=255)),
                ('last_scraped', models.DateTimeField(auto_now=True)),
                ('scraping_count', models.IntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0)),
                ('last_error', models.TextField(blank=True, null=True)),
                ('rate_limit_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scraped_sites', to='core.scrapingstructure')),
            ],
            options={
                'indexes': [models.Index(fields=['domain', 'structure'], name='scraping_sc_domain_c8b896_idx'), models.Index(fields=['last_scraped'], name='scraping_sc_last_sc_d49769_idx'), models.Index(fields=['rate_limit_until'], name='scraping_sc_rate_li_5f240d_idx')],
                'unique_together': {('url', 'structure')},
            },
        ),
    ]
